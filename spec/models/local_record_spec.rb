require 'rails_helper'

RSpec.describe LocalRecord, type: :model do
  before do
    load Rails.root.join('db', 'seeds.rb')
  end

  it 'is automatically generated by IpAddress' do
    record_num = LocalRecord.count
    ip         = sample_ip_address
    expect(ip.save).to be_truthy
    expect(LocalRecord.count).to eq(record_num+4)
    types = ip.local_records.map(&:rdtype)
    expect(types).to include('A')
    expect(types).to include('AAAA')
    expect(types).to include('PTR')
  end

  it 'is automatically update SOA records' do
    soa_names= ['st.ie.u-ryukyu.ac.jp',
                '0.0.10.in-addr.arpa',
                '4.0.5.a.c.1.0.0.8.f.2.0.1.0.0.2.ip6.arpa']

    soa_names.each do |name|
      old_soa = LocalRecord.where(rdtype: 'SOA', name: name).first
      ip      = sample_ip_address
      ip.save
      new_soa = LocalRecord.where(rdtype: 'SOA', name: name).first
      expect(new_soa.rdata).to be > old_soa.rdata
      ip.destroy
    end
  end

  it 'is automatically update SOA on A record many times' do
    soa = LocalRecord.where(rdtype: 'SOA', name: 'st.ie.u-ryukyu.ac.jp').first
    ip  = sample_ip_address
    110.times do |n|
      old_soa   = soa.reload.rdata
      ip.domain = "hoge#{n}"
      expect(ip.save).to be_truthy
      new_soa = soa.reload.rdata
      expect(new_soa).to be > old_soa
    end
  end

  it 'is automatically update SOA on Reverse record' do
    old_soa = LocalRecord.where(rdtype: 'SOA', name: '0.0.10.in-addr.arpa').first
    sample_ip_address.save
    new_soa = LocalRecord.where(rdtype: 'SOA', name: '0.0.10.in-addr.arpa').first
    expect(new_soa.rdata).to be > old_soa.rdata
  end

  it 'can create by manually' do
    record = LocalRecord.new(name: 'hoge', rdtype: 'A', rdata: 'hogehoge')

    expect(record.save).to be_truthy
    expect(record.ttl).to  eq(24.hours)
  end

  it 'validates rdtype' do
    record = LocalRecord.new(name: 'hoge', rdtype: 'AAA', rdata: 'hogehoge')
    expect(record.save).to be_falsy
  end

  describe 'global IP' do
    it 'is supports global IP ' do
      ip                  = sample_ip_address
      ip.vlan             = 50
      ip.assigned_address = '133.13.50.100'

      expect(ip.save).to be_truthy
      expect(ip.local_records).to be_empty
      ip.local_records.create(name: ip.fqdn, rdtype: 'A', rdata: '133.13.50.100')
      expect(ip.ipv4).to eq('133.13.50.100')
      ip.local_records.create(name: ip.fqdn, rdtype: 'AAAA', rdata: '::42')
      expect(ip.ipv6).to eq('::42')
    end
  end

  describe '#soa_record' do
    it 'is return rev4 supported flat range' do
      ip = sample_ip_address
      expect(ip.save).to be_truthy
      rev4 = ip.local_records.find{|l| l.rdtype == 'PTR' && l.name.include?('addr')}
      expect(rev4.soa_record.name).to eq('0.0.10.in-addr.arpa')

      ip.assigned_address = '10.0.3.111'
      expect(ip.save).to be_truthy
      expect(rev4.reload.soa_record.name).to eq('3.0.10.in-addr.arpa')
    end
  end
end
